/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nuggets_apnea;
import java.util.ArrayList;
import java.text.DecimalFormat;
/**
 *
 * @author seabirds
 */
public class CNFrame extends javax.swing.JFrame {

    /**
     * Creates new form CNFrame
     */
    MainFrame1 mf;
    NDataFrame nf;
    NuggetScore2 ns;
    ArrayList delList=new ArrayList();
    ArrayList wjPList1=new ArrayList();
    ArrayList wjPList2=new ArrayList();
    
    ArrayList crList1=new ArrayList();
    ArrayList crList2=new ArrayList();
    double sc1[][];
    double sc2[][];
    String NV[][];
    String N1[][];
    String N2[][];
    public CNFrame(MainFrame1 me,NDataFrame ne,NuggetScore2 n2) 
    {
        initComponents();
        mf=me;
        nf=ne;
        ns=n2;        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 250, 250));

        jLabel1.setFont(new java.awt.Font("Century Schoolbook", 0, 24)); // NOI18N
        jLabel1.setText("Critical Nuggets");

        jLabel2.setFont(new java.awt.Font("Century Schoolbook", 0, 15)); // NOI18N
        jLabel2.setText("Find Critical Nuggets");

        jButton1.setFont(new java.awt.Font("Century Schoolbook", 0, 15)); // NOI18N
        jButton1.setText("Find");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Century Schoolbook", 0, 15)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setFont(new java.awt.Font("Century Schoolbook", 0, 15)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Century Schoolbook", 0, 15)); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Century Schoolbook", 0, 15)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(82, 82, 82)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(82, 82, 82)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 120, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(jLabel1)
                .addGap(224, 224, 224))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            double threshold=1.0;
            DecimalFormat df=new DecimalFormat("#.###");
            
            sc1=new double[ns.scrBP.length][2];
            sc2=new double[ns.scrBM.length][2];
            for(int i1=0;i1<ns.scrBP.length;i1++)
            {
                ArrayList scrList1=new ArrayList();
                ArrayList at=new ArrayList();
                int k1=(int)ns.scrBP[i1][0];
                System.out.println("------------------");
                for(int j=0;j<ns.scrBP.length;j++)
                {
                    int k2=(int)ns.scrBP[j][0];
                    double e1=0;
                    for(int k=0;k<mf.val[0].length;k++)
                    {
                        double d1=Double.parseDouble(mf.val[k1][k])-Double.parseDouble(mf.val[k2][k]);
                        e1=e1+(d1*d1);
                    }     
                    e1=Math.sqrt(e1);
                    if(e1<=mf.R)
                    {
                        System.out.println(" --- "+k2);
                        at.add(k2);
                    }
                }
                
                 NV=new String[at.size()][mf.val[0].length];
                 N1=new String[at.size()][mf.val[0].length];
                 N2=new String[at.size()][mf.val[0].length];
                
                for(int j=0;j<at.size();j++)
                {
                    int k2=Integer.parseInt(at.get(j).toString());
                    NV[j]=mf.val[k2];
                    N1[j]=mf.val[k2];
                    N2[j]=mf.val[k2];
                }
                                
                
                for(int i=0;i<NV[0].length-1;i++)  //Nval[0].length-1 // remove cls variable
                {
                    double min1=Double.parseDouble(NV[0][i]);
                    double max1=Double.parseDouble(NV[0][i]);
                
                    for(int j=1;j<NV.length;j++)
                    {
                        double d1=Double.parseDouble(NV[j][i]);
                                    
                        min1=Math.min(min1, d1);
                        max1=Math.max(max1, d1);
                    }
                    double delta=max1-min1;
                    // System.out.println(min1+" : "+max1+" : "+(max1-min1));
                    if(delta==0)
                        delta=mf.R;
                
                    delList.add(delta);
                
                    for(int j=0;j<NV.length;j++)
                    {
                        N1[j][i]=String.valueOf(delta+Double.parseDouble(NV[j][i]));
                        N2[j][i]=String.valueOf(Double.parseDouble(NV[j][i])-delta);
                    }
                
                    String test1[]=new String[N1.length];
                    String test2[]=new String[N2.length];
           
                   // System.out.println("------------ New Data -------------");  
                    
                    for(int k=0;k<N1.length;k++)
                    {
                        String g1="";
                        String g2="";
                        for(int j=0;j<N1[0].length;j++)
                        {
                            //  System.out.print(" "+Nval1[k][j]);
                            g1=g1+N1[k][j]+" ";
                            g2=g2+N2[k][j]+" ";
                        }
                        test1[k]=g1.trim();
                        test2[k]=g2.trim();
                       // System.out.println();
                    }
                    //    System.out.println("--------------------");
            
                    String input[]=new String[mf.val.length];
                    for(int k=0;k<mf.val.length;k++)
                    {
                        String g1="";
                        for(int j=0;j<mf.val[0].length;j++)
                        {
                            g1=g1+mf.val[k][j]+" ";
                        }   
                        input[k]=g1.trim();
                    }
                
                    System.out.println("Data Size "+input.length+" : "+mf.cls.length+" : "+test1.length);
                
                    DataClassification1 dc1=new DataClassification1(input,mf.cls,test1);
                    ArrayList at1=dc1.Testclassifier();
                    int wjP=0;
                    for(int k=0;k<at1.size();k++)
                    {
                        String sg1=at1.get(k).toString();
                        if(!(nf.centerCls.equals(sg1)))
                        {
                            wjP++;
                        }
                    }
            
                    double wjP1=(double)wjP/(double)at1.size();
                    //System.out.println("----- wjP "+wjP);
                    wjPList1.add(wjP1);
                    DataClassification1 dc2=new DataClassification1(input,mf.cls,test2);
                    ArrayList at2=dc2.Testclassifier();
                    int wjM=0;
                    for(int k=0;k<at2.size();k++)
                    {
                        String sg1=at2.get(k).toString();
                        if(!(nf.centerCls.equals(sg1)))
                        {
                            wjM++;
                        }
                    }
                    
                    double wjM1=(double)wjM/(double)at2.size();
                    wjPList2.add(wjM1);
                    double d1=((double)wjP1+(double)wjM1)/2;
                    System.out.println("----- wjP "+wjP1+" : "+wjM1+" : "+d1);
                    //scr1.add(d1);
                
                    boolean upCnt=false;
                    boolean downCnt=false;
                    
                    if(wjP1>=threshold)
                    {
                        upCnt=true;
                    }
                    if(wjM1>=threshold)
                    {
                        downCnt=true;
                    }
                
                    double sum=wjP1+wjM1;
                
                    System.out.println(" xor "+upCnt+" : "+downCnt+" : "+(upCnt ^ downCnt));
                    if(upCnt ^ downCnt)
                    {
                        // Cal Rotation Test
                        System.out.println("--------------- Call Rotation Test -----------------");
                        //double del=Double.parseDouble(nf.delList.get(i).toString());
                        RotationTest2 rt=new RotationTest2(mf,this,delta,i);
                        sum=rt.FindScore();
                        System.out.println(sum);
                    }
                    double ed1=sum/2;
                
                    scrList1.add(df.format(ed1));
                    System.out.println("sum Score "+ed1);
                    
                }
                         
                
                double e1=0;
                String sg1="";
            
                for(int i=0;i<scrList1.size();i++)
                {
                    double e2=Double.parseDouble(scrList1.get(i).toString());
                    sg1=sg1+df.format(e2)+"\n\n";
                    e1=e1+e2;
                }
                //e1=e1/scrList1.size();
                double CRScore=e1/(double)mf.val[0].length;
                System.out.println("sum CRScore "+CRScore);
                crList1.add(CRScore);              
                sc1[i1][0]=k1;
                sc1[i1][1]=Double.parseDouble(df.format(CRScore));
            }
            
            System.out.println("crList1  "+crList1);
            System.out.println("crList1 size   "+crList1.size());
            
            for(int i=0;i<sc1.length;i++)
            {
                for(int j=i+1;j<sc1.length;j++)
                {
                    if(sc1[i][1]<sc1[j][1])
                    {
                        double t1=sc1[i][0];
                        sc1[i][0]=sc1[j][0];
                        sc1[j][0]=t1;
                            
                        double t2=sc1[i][1];
                        sc1[i][1]=sc1[j][1];
                        sc1[j][1]=t2;
                    }
                            
                 }
            }
            String gs1="";
            if(sc1.length>=5)
            {
               for(int i=0;i<5;i++)
               {
                   gs1=gs1+sc1[i][0]+" :  "+sc1[i][1]+"\n\n";
               }
            }
            else if(sc1.length<=3)
            {
               for(int i=0;i<3;i++)
               {
                   gs1=gs1+(int)sc1[i][0]+"  :  "+sc1[i][1]+"\n\n";
               }
            }
            System.out.println("gs1 "+gs1);
            jTextArea1.setText(gs1);
            jLabel3.setText(mf.clsFeat.get(0).toString());
            jLabel4.setText(mf.clsFeat.get(1).toString());
            
            
            // Class -
            for(int i1=0;i1<ns.scrBM.length;i1++)
            {
                ArrayList scrList1=new ArrayList();
                ArrayList at=new ArrayList();
                int k1=(int)ns.scrBM[i1][0];
                System.out.println("------------------");
                for(int j=0;j<ns.scrBM.length;j++)
                {
                    int k2=(int)ns.scrBM[j][0];
                    double e1=0;
                    for(int k=0;k<mf.val[0].length;k++)
                    {
                        double d1=Double.parseDouble(mf.val[k1][k])-Double.parseDouble(mf.val[k2][k]);
                        e1=e1+(d1*d1);
                    }     
                    e1=Math.sqrt(e1);
                    if(e1<=mf.R)
                    {
                        System.out.println(" --- "+k2);
                        at.add(k2);
                    }
                }
                
                 NV=new String[at.size()][mf.val[0].length];
                 N1=new String[at.size()][mf.val[0].length];
                 N2=new String[at.size()][mf.val[0].length];
                
                for(int j=0;j<at.size();j++)
                {
                    int k2=Integer.parseInt(at.get(j).toString());
                    NV[j]=mf.val[k2];
                    N1[j]=mf.val[k2];
                    N2[j]=mf.val[k2];
                }
                                
                
                for(int i=0;i<NV[0].length-1;i++)  //Nval[0].length-1 // remove cls variable
                {
                    double min1=Double.parseDouble(NV[0][i]);
                    double max1=Double.parseDouble(NV[0][i]);
                
                    for(int j=1;j<NV.length;j++)
                    {
                        double d1=Double.parseDouble(NV[j][i]);
                                    
                        min1=Math.min(min1, d1);
                        max1=Math.max(max1, d1);
                    }
                    double delta=max1-min1;
                    // System.out.println(min1+" : "+max1+" : "+(max1-min1));
                    if(delta==0)
                        delta=mf.R;
                
                    delList.add(delta);
                
                    for(int j=0;j<NV.length;j++)
                    {
                        N1[j][i]=String.valueOf(delta+Double.parseDouble(NV[j][i]));
                        N2[j][i]=String.valueOf(Double.parseDouble(NV[j][i])-delta);
                    }
                
                    String test1[]=new String[N1.length];
                    String test2[]=new String[N2.length];
           
                   // System.out.println("------------ New Data -------------");  
                    
                    for(int k=0;k<N1.length;k++)
                    {
                        String g1="";
                        String g2="";
                        for(int j=0;j<N1[0].length;j++)
                        {
                            //  System.out.print(" "+Nval1[k][j]);
                            g1=g1+N1[k][j]+" ";
                            g2=g2+N2[k][j]+" ";
                        }
                        test1[k]=g1.trim();
                        test2[k]=g2.trim();
                       // System.out.println();
                    }
                    //    System.out.println("--------------------");
            
                    String input[]=new String[mf.val.length];
                    for(int k=0;k<mf.val.length;k++)
                    {
                        String g1="";
                        for(int j=0;j<mf.val[0].length;j++)
                        {
                            g1=g1+mf.val[k][j]+" ";
                        }   
                        input[k]=g1.trim();
                    }
                
                    System.out.println("Data Size "+input.length+" : "+mf.cls.length+" : "+test1.length);
                
                    DataClassification1 dc1=new DataClassification1(input,mf.cls,test1);
                    ArrayList at1=dc1.Testclassifier();
                    int wjP=0;
                    for(int k=0;k<at1.size();k++)
                    {
                        String sg1=at1.get(k).toString();
                        if(!(nf.centerCls.equals(sg1)))
                        {
                            wjP++;
                        }
                    }
            
                    double wjP1=(double)wjP/(double)at1.size();
                    //System.out.println("----- wjP "+wjP);
                    wjPList1.add(wjP1);
                    DataClassification1 dc2=new DataClassification1(input,mf.cls,test2);
                    ArrayList at2=dc2.Testclassifier();
                    int wjM=0;
                    for(int k=0;k<at2.size();k++)
                    {
                        String sg1=at2.get(k).toString();
                        if(!(nf.centerCls.equals(sg1)))
                        {
                            wjM++;
                        }
                    }
                    
                    double wjM1=(double)wjM/(double)at2.size();
                    wjPList2.add(wjM1);
                    double d1=((double)wjP1+(double)wjM1)/2;
                    System.out.println("----- wjP "+wjP1+" : "+wjM1+" : "+d1);
                    //scr1.add(d1);
                
                    boolean upCnt=false;
                    boolean downCnt=false;
                    
                    if(wjP1>=threshold)
                    {
                        upCnt=true;
                    }
                    if(wjM1>=threshold)
                    {
                        downCnt=true;
                    }
                
                    double sum=wjP1+wjM1;
                
                    System.out.println(" xor "+upCnt+" : "+downCnt+" : "+(upCnt ^ downCnt));
                    if(upCnt ^ downCnt)
                    {
                        // Cal Rotation Test
                        System.out.println("--------------- Call Rotation Test -----------------");
                        //double del=Double.parseDouble(nf.delList.get(i).toString());
                        RotationTest2 rt=new RotationTest2(mf,this,delta,i);
                        sum=rt.FindScore();
                        System.out.println(sum);
                    }
                    double ed1=sum/2;
                
                    scrList1.add(df.format(ed1));
                    System.out.println("sum Score "+ed1);
                    
                }
                         
                
                double e1=0;
                String sg1="";
            
                for(int i=0;i<scrList1.size();i++)
                {
                    double e2=Double.parseDouble(scrList1.get(i).toString());
                    sg1=sg1+df.format(e2)+"\n\n";
                    e1=e1+e2;
                }
                //e1=e1/scrList1.size();
                double CRScore=e1/(double)mf.val[0].length;
                System.out.println("sum CRScore "+CRScore);
                crList2.add(CRScore);              
                sc2[i1][0]=k1;
                sc2[i1][1]=Double.parseDouble(df.format(CRScore));
            }
            
            System.out.println("crList1  "+crList1);
            System.out.println("crList1 size   "+crList1.size());
            
            
            System.out.println("crList2  "+crList2);
            System.out.println("crList2 size   "+crList2.size());
            
            for(int i=0;i<sc2.length;i++)
            {
                for(int j=i+1;j<sc2.length;j++)
                {
                    if(sc2[i][1]<sc2[j][1])
                    {
                        double t1=sc2[i][0];
                        sc2[i][0]=sc2[j][0];
                        sc2[j][0]=t1;
                            
                        double t2=sc2[i][1];
                        sc2[i][1]=sc2[j][1];
                        sc2[j][1]=t2;
                    }
                            
                 }
            }
            String gs2="";
            if(sc2.length>=5)
            {
               for(int i=0;i<5;i++)
               {
                   gs2=gs2+sc2[i][0]+" :  "+sc2[i][1]+"\n\n";
               }
            }
            else if(sc2.length<=3)
            {
               for(int i=0;i<3;i++)
               {
                   gs2=gs2+(int)sc2[i][0]+"  :  "+sc2[i][1]+"\n\n";
               }
            }
            System.out.println("gs2 "+gs2);
            jTextArea2.setText(gs2);
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CNFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CNFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CNFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CNFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // new CNFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
